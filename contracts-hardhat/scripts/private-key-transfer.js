/**
 * Private Key Asset Transfer
 * Ìï¥Ïª§ÌÜ§ ÌïµÏã¨: Private keyÎ°ú ÏûêÏÇ∞ ÏÜåÏú†Í∂å Ï¶ùÎ™Ö Î∞è Ïã§Ï†ú Ï†ÑÏÜ°
 */

const { ethers } = require('hardhat');

// ÌÖåÏä§Ìä∏Ïö© Private Key (Ïã§Ï†ú ÏÑúÎπÑÏä§ÏóêÏÑúÎäî ÏïàÏ†ÑÌïòÍ≤å Í¥ÄÎ¶¨)
const PRIVATE_KEY = '0x4883a8fd611148c2eeda5397693e12fba45b939e22375d4f9a469b62d1f1c882';

// OKB ÌÜ†ÌÅ∞ Ïª®Ìä∏ÎûôÌä∏ Ï£ºÏÜå (Sepolia)
const OKB_TOKEN_ADDRESS = '0x0BC13595f7DABbF1D00fC5CAa670D2374BD4AA9a';

// ÌÖåÏä§Ìä∏ ÎåÄÏÉÅ Ï£ºÏÜå (Ï†ÑÏÜ°Î∞õÏùÑ Ï£ºÏÜå)
const TEST_RECIPIENT = '0xB1Fd8ccd8b66a3DeDcD5fFef1Edb22fbCA01c66b';

async function main() {
  console.log('üîê Starting Private Key Asset Transfer...');
  
  // 1. Private keyÎ°ú Wallet ÏÉùÏÑ±
  const provider = ethers.provider;
  const wallet = new ethers.Wallet(PRIVATE_KEY, provider);
  
  console.log(`üë§ Sender Address: ${wallet.address}`);
  console.log(`üìç Recipient Address: ${TEST_RECIPIENT}`);

  // 2. ÌòÑÏû¨ ÏûîÍ≥† ÌôïÏù∏
  const ethBalance = await provider.getBalance(wallet.address);
  console.log(`üí∞ Sender ETH Balance: ${ethers.formatEther(ethBalance)} ETH`);

  // 3. OKB ÌÜ†ÌÅ∞ Ïª®Ìä∏ÎûôÌä∏ Ïó∞Í≤∞
  const okbToken = await ethers.getContractAt('IERC20', OKB_TOKEN_ADDRESS, wallet);
  const okbBalance = await okbToken.balanceOf(wallet.address);
  console.log(`ü™ô Sender OKB Balance: ${ethers.formatEther(okbBalance)} OKB`);

  // 4. Recipient ÌòÑÏû¨ ÏûîÍ≥†
  const recipientOkbBalance = await okbToken.balanceOf(TEST_RECIPIENT);
  console.log(`üìç Recipient OKB Balance (Before): ${ethers.formatEther(recipientOkbBalance)} OKB`);

  // 5. OKB ÌÜ†ÌÅ∞ Ï†ÑÏÜ° (0.1 OKB)
  const transferAmount = ethers.parseEther('0.1'); // 0.1 OKB
  
  if (okbBalance >= transferAmount) {
    console.log(`\nüöÄ Transferring 0.1 OKB to recipient...`);
    
    try {
      // Ïã§Ï†ú ÌÜ†ÌÅ∞ Ï†ÑÏÜ° Ìä∏ÎûúÏû≠ÏÖò
      const tx = await okbToken.transfer(TEST_RECIPIENT, transferAmount);
      console.log(`üìù Transaction Hash: ${tx.hash}`);
      
      // Ìä∏ÎûúÏû≠ÏÖò ÏôÑÎ£å ÎåÄÍ∏∞
      const receipt = await tx.wait();
      console.log(`‚úÖ Transaction confirmed in block: ${receipt.blockNumber}`);
      
      // 6. Ï†ÑÏÜ° ÌõÑ ÏûîÍ≥† ÌôïÏù∏
      const newSenderBalance = await okbToken.balanceOf(wallet.address);
      const newRecipientBalance = await okbToken.balanceOf(TEST_RECIPIENT);
      
      console.log(`\nüìä Transfer Results:`);
      console.log(`üë§ Sender OKB Balance (After): ${ethers.formatEther(newSenderBalance)} OKB`);
      console.log(`üìç Recipient OKB Balance (After): ${ethers.formatEther(newRecipientBalance)} OKB`);
      
      console.log(`\n‚úÖ SUCCESS: Private key transfer completed!`);
      console.log(`üèÜ Ìï¥Ïª§ÌÜ§ ÏöîÍµ¨ÏÇ¨Ìï≠ Ï∂©Ï°±: Private keyÎ°ú ÏûêÏÇ∞ ÏÜåÏú†Í∂å Ï¶ùÎ™Ö Î∞è Ï†ÑÏÜ° ÏÑ±Í≥µ`);
      
    } catch (error) {
      console.error(`‚ùå Transfer failed:`, error.message);
    }
    
  } else {
    console.log(`‚ùå Insufficient OKB balance for transfer`);
  }
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error('‚ùå Error:', error);
    process.exit(1);
  });