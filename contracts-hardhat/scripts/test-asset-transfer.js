/**
 * Test Asset Transfer Script
 * Ìï¥Ïª§ÌÜ§ ÏöîÍµ¨ÏÇ¨Ìï≠: Private keyÎ°ú ÏûêÏÇ∞ ÏÜåÏú†Í∂å Ï¶ùÎ™Ö Î∞è Ï†ÑÏÜ°
 */

const { ethers } = require('hardhat');

// Ïö∞Î¶¨ Ïä§ÎßàÌä∏ Í≥ÑÏ†ï Ï£ºÏÜå (Í≥†Ï†ï)
const SMART_ACCOUNT_ADDRESS = '0x9f0815a0b5ffb7e7178858cd62156487ba991414';

// OKB ÌÜ†ÌÅ∞ Ïª®Ìä∏ÎûôÌä∏ Ï£ºÏÜå (Sepolia)
const OKB_TOKEN_ADDRESS = '0x0BC13595f7DABbF1D00fC5CAa670D2374BD4AA9a';

// ÌÖåÏä§Ìä∏ ÎåÄÏÉÅ Ï£ºÏÜå (Ï†ÑÏÜ°Î∞õÏùÑ Ï£ºÏÜå)
const TEST_RECIPIENT = '0xB1Fd8ccd8b66a3DeDcD5fFef1Edb22fbCA01c66b';

async function main() {
  console.log('üèÅ Starting Asset Transfer Test...');
  console.log(`üìç Smart Account: ${SMART_ACCOUNT_ADDRESS}`);
  console.log(`ü™ô OKB Token: ${OKB_TOKEN_ADDRESS}`);
  console.log(`üìç Recipient: ${TEST_RECIPIENT}`);

  // 1. ÌòÑÏû¨ Ïä§ÎßàÌä∏ Í≥ÑÏ†ïÏùò ETH ÏûîÍ≥† ÌôïÏù∏
  const provider = ethers.provider;
  const ethBalance = await provider.getBalance(SMART_ACCOUNT_ADDRESS);
  console.log(`üí∞ ETH Balance: ${ethers.formatEther(ethBalance)} ETH`);

  // 2. OKB ÌÜ†ÌÅ∞ ÏûîÍ≥† ÌôïÏù∏
  const okbToken = await ethers.getContractAt('IERC20', OKB_TOKEN_ADDRESS);
  const okbBalance = await okbToken.balanceOf(SMART_ACCOUNT_ADDRESS);
  console.log(`ü™ô OKB Balance: ${ethers.formatEther(okbBalance)} OKB`);

  // 3. ÏàòÏã†ÏûêÏùò ÌòÑÏû¨ ÏûîÍ≥† ÌôïÏù∏
  const recipientEthBalance = await provider.getBalance(TEST_RECIPIENT);
  const recipientOkbBalance = await okbToken.balanceOf(TEST_RECIPIENT);
  console.log(`üìç Recipient ETH: ${ethers.formatEther(recipientEthBalance)} ETH`);
  console.log(`üìç Recipient OKB: ${ethers.formatEther(recipientOkbBalance)} OKB`);

  // Private keyÎ•º ÏÇ¨Ïö©Ìïú Ïã§Ï†ú Ï†ÑÏÜ° ÌÖåÏä§Ìä∏Î•º ÏúÑÌï¥ 
  // ÏùºÎã® ÌòÑÏû¨ ÏÉÅÌÉúÎßå ÌôïÏù∏
  console.log('\n‚úÖ Asset status check completed');
  console.log('üí° Next: Implement private key based transfer');
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error('‚ùå Error:', error);
    process.exit(1);
  });